# .github/workflows/release.yml

name: Android Release Build

on:
  push:
    tags:
      - 'v*' # Trigger workflow only on pushes to tags starting with 'v' (e.g., v1.0, v2.1.3)

jobs:
  build:
    name: Build Release APK
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Decode Keystore
        id: decode_keystore
        run: |
          KEYSTORE_PATH="${GITHUB_WORKSPACE}/release.jks"
          echo "storeFile=${KEYSTORE_PATH}" >> $GITHUB_ENV
          echo "${{ secrets.SIGNING_STORE_BASE64 }}" | base64 --decode > "${KEYSTORE_PATH}"
        env:
          SIGNING_STORE_BASE64: ${{ secrets.SIGNING_STORE_BASE64 }}

      # ---> Modified Build Step <---
      - name: Build Release APK with Tag Version
        run: |
          # Extract version from tag (remove leading 'v' if present)
          TAG_NAME="${{ github.ref_name }}"
          VERSION_NAME="${TAG_NAME#v}" 
          echo "Using Version Name from Tag: $VERSION_NAME"
          
          # Pass version name as a Gradle property (-P)
          ./gradlew assembleRelease -PversionNameFromTag="$VERSION_NAME"
        env:
          SIGNING_STORE_FILE: ${{ env.storeFile }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}

      - name: Find APK artifact name
        id: find_apk
        run: |
          # This find command will now find e.g., vyas-mahabharat-v1.2.3.apk
          APK_PATH=$(find app/build/outputs/apk/release -maxdepth 1 -name '*.apk' | head -n 1)
          if [ -z "$APK_PATH" ]; then
            echo "Error: No APK file found in app/build/outputs/apk/release/"
            exit 1
          fi
          echo "Found APK: ${APK_PATH}"
          echo "apk_path=${APK_PATH}" >> $GITHUB_OUTPUT
          echo "apk_filename=$(basename "${APK_PATH}")" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          # body: Optional release notes
          draft: false
          prerelease: false
          files: |
            ${{ steps.find_apk.outputs.apk_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}